[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pyoxide"
version = "0.2.0"
description = "A Python project created with pyOxide"
authors = [
    {name = "rustymotors", email = "rustymotors@github.com"},
]
readme = "README.md"
license = {text = "GPL-3.0-or-later"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "django>=4.2",
    "jinja2>=3.1",
    "requests>=2.28",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-django>=4.5",
    "coverage[toml]>=7.0",
    "black>=22.0",
    "flake8>=4.0",
    "mypy>=0.950",
    "isort>=5.10",
    "django-stubs>=4.2",
    "django-stubs[compatible-mypy]>=4.2",
    "types-requests>=2.28",
    "pre-commit>=3.0",
]

[project.urls]
Homepage = "https://github.com/rustymotors/pyoxide"
Repository = "https://github.com/rustymotors/pyoxide"
Issues = "https://github.com/rustymotors/pyoxide/issues"

[project.scripts]
pyoxide = "src.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py38']

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
# Disabled Django plugin for Python 3.8 compatibility
# plugins = ["mypy_django_plugin.main"]

[[tool.mypy.overrides]]
module = "src.django_app.*"
disallow_untyped_defs = false
ignore_errors = true

[[tool.mypy.overrides]]
module = "src.django_app.pyoxide_admin.*"
disallow_untyped_defs = false
ignore_errors = true

[[tool.mypy.overrides]]
module = "src.django_app.views"
disallow_untyped_defs = false
ignore_errors = true

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "scripts.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "src.django_app.settings"

[tool.flake8]
max-line-length = 88
extend-ignore = "E203,W503"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=src --cov-report=html --cov-report=xml --cov-report=term-missing"
testpaths = [
    "tests",
]
DJANGO_SETTINGS_MODULE = "src.django_app.settings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "reports/htmlcov"

[tool.coverage.xml]
output = "reports/coverage.xml"

[tool.bandit]
# Bandit configuration for pyOxide security scanning

# Tests to skip (use test IDs)
skips = [
    "B101",  # assert_used - we use asserts in tests
    "B601",  # paramiko_calls - not applicable
    "B602",  # subprocess_popen_with_shell_equals_true - handled carefully
]

# Paths to exclude from scanning
exclude_dirs = [
    "tests",
    ".venv",
    "venv",
    ".git",
    "__pycache__",
    "htmlcov",
]

# Confidence levels: LOW, MEDIUM, HIGH
confidence = "MEDIUM"

# Severity levels: LOW, MEDIUM, HIGH

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-django>=4.5",
    "coverage[toml]>=7.0",
    "black>=22.0",
    "flake8>=4.0",
    "flake8-pyproject>=1.2",
    "mypy>=0.950",
    "isort>=5.10",
    "django-stubs>=4.2",
    "django-stubs[compatible-mypy]>=4.2",
    "types-requests>=2.28",
    "pre-commit>=3.0",
    "bandit[toml]>=1.7",
]

[tool.hatch.envs.default.scripts]
# Test commands (with proper PYTHONPATH)
test = "python -m pytest {args}"
test-cov = "python -m pytest --cov=src --cov-report=html:reports/htmlcov --cov-report=xml:reports/coverage.xml --cov-report=term-missing {args}"
test-verbose = "python -m pytest --cov=src --cov-report=html:reports/htmlcov --cov-report=xml:reports/coverage.xml --cov-report=term-missing --verbose {args}"

# Code quality commands
format = [
    "python -m isort src tests",
    "python -m black src tests",
]
format-check = [
    "python -m isort --check-only src tests",
    "python -m black --check src tests",
]
lint = "python -m flake8 src tests"
type-check = "python -m mypy src"
security = [
    "python -m bandit -r src -f json -o bandit-report.json || true",
]

# Combined commands
check = [
    "format-check",
    "lint",
    "type-check",
    "security",
]
ci = [
    "check",
    "test-cov",
]

# Development commands
install-hooks = "python -m pre_commit install"
run-hooks = "python -m pre_commit run --all-files"
server = "python -m src.main"
coverage-report = "python scripts/coverage_status.py"
