name: CI/CD Pipeline

on:
  push:
    branches: [ "**" ]  # Run on all branches for immediate feedback
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering
  schedule:
    # Run tests weekly on Monday at 2 AM UTC
    - cron: '0 2 * * 1'

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  # Job 1: Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Run code quality checks
      run: |
        echo "::group::Code Quality Checks"
        hatch run check
        echo "::endgroup::"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 30

  # Job 2: Test Matrix with Coverage
  test-matrix:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-test-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-test-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-test-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Run tests with coverage
      run: |
        echo "::group::Running Tests with Coverage"
        hatch run test-verbose --junitxml=pytest-results.xml
        echo "::endgroup::"

    - name: Generate coverage summary
      run: |
        echo "::group::Coverage Summary"
        hatch run coverage-report | tee coverage-summary.txt
        echo "::endgroup::"

    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('reports/htmlcov/index.html') != ''
      with:
        name: coverage-html-python${{ matrix.python-version }}
        path: reports/htmlcov/
        retention-days: 30

    - name: Upload XML coverage report
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('reports/coverage.xml') != ''
      with:
        name: coverage-xml-python${{ matrix.python-version }}
        path: reports/coverage.xml
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('pytest-results.xml') != ''
      with:
        name: pytest-results-python${{ matrix.python-version }}
        path: pytest-results.xml
        retention-days: 30

    - name: Upload coverage summary
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('coverage-summary.txt') != ''
      with:
        name: coverage-summary-python${{ matrix.python-version }}
        path: coverage-summary.txt
        retention-days: 30

  # Job 3: Coverage Reporting (only for default Python version)
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test-matrix
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Run tests with coverage
      run: |
        echo "::group::Running Tests with Coverage"
        hatch run test-verbose --junitxml=pytest-results.xml
        echo "::endgroup::"

        # Ensure files are created with proper names
        if [ -f "reports/coverage.xml" ]; then
          echo "✓ Coverage XML report generated"
          # Copy to root for external tools
          cp reports/coverage.xml coverage.xml
        else
          echo "⚠ Coverage XML report not found"
        fi

        if [ -f "pytest-results.xml" ]; then
          echo "✓ Pytest results found"
        else
          echo "⚠ Pytest results not found"
          # Create a minimal results file to prevent failures
          echo '<?xml version="1.0" encoding="UTF-8"?><testsuites></testsuites>' > pytest-results.xml
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: hashFiles('coverage.xml') != ''
      with:
        file: ./coverage.xml
        flags: unittests
        name: pyoxide-coverage
        fail_ci_if_error: false
        verbose: true

    - name: Create coverage badge
      if: hashFiles('coverage.xml') != ''
      run: |
        hatch run coverage-report

  # Job 4: Build Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [code-quality, test-matrix, coverage-report]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create build summary
      run: |
        echo "# 🚀 pyOxide Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Test Matrix: ${{ needs.test-matrix.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage Report: ${{ needs.coverage-report.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📁 Available Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- HTML Coverage Reports (per Python version)" >> $GITHUB_STEP_SUMMARY
        echo "- XML Coverage Reports (per Python version)" >> $GITHUB_STEP_SUMMARY
        echo "- PyTest Results (per Python version)" >> $GITHUB_STEP_SUMMARY
        echo "- Security Reports (Bandit & Safety)" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage Summaries" >> $GITHUB_STEP_SUMMARY
